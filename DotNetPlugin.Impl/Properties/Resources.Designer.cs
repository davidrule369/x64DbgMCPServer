//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetPlugin.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DotNetPlugin.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap AboutIcon {
            get {
                object obj = ResourceManager.GetObject("AboutIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap MainIcon {
            get {
                object obj = ResourceManager.GetObject("MainIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debugger Command Help Manual
        ///
        ///InitDebug
        ///ExecuteDebuggerCommand command = InitDebug executable_path [command_line] [current_folder]
        ///[string]executable_path = Path to the executable file to debug. If a full path is not provided, the current directory is used. Enclose paths with spaces in quotation marks.
        ///[optional string]command_line = Command line arguments to pass to the process.
        ///[optional string]current_folder = Working directory for the process.
        ///Description: Initializes the debugger by loading the  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DebugControl {
            get {
                return ResourceManager.GetString("DebugControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;command&quot;: &quot;InitDebug&quot;,
        ///    &quot;aliases&quot;: [&quot;initdbg&quot;, &quot;init&quot;],
        ///    &quot;description&quot;: &quot;Initializes the debugger by loading the specified executable, performing basic checks, setting breakpoints on TLS callbacks (if present), and at the process entry point. It breaks at the system breakpoint before returning control to the user.&quot;,
        ///    &quot;arguments&quot;: [
        ///      {
        ///        &quot;name&quot;: &quot;executable_path&quot;,
        ///        &quot;type&quot;: &quot;string&quot;,
        ///        &quot;description&quot;: &quot;Path to the executable file to debug. If a full path is  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DebugControlJSON {
            get {
                return ResourceManager.GetString("DebugControlJSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to disasm
        ///ExecuteDebuggerCommand command = disasm address
        ///[integer]address = The memory address to display in the disassembly view.
        ///Description: Opens the disassembly view at the specified address. Aliases: dis, d.
        ///Example:
        ///ExecuteDebuggerCommand command = &quot;dis 0x00401000&quot;
        ///ExecuteDebuggerCommand command = &quot;d MyFunctionEntry&quot;
        ///
        ///dump
        ///ExecuteDebuggerCommand command = dump address
        ///[integer]address = The memory address to display in the dump view.
        ///Description: Opens the dump view at the specified address. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GUI {
            get {
                return ResourceManager.GetString("GUI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;command&quot;: &quot;disasm&quot;,
        ///    &quot;aliases&quot;: [&quot;dis&quot;, &quot;d&quot;],
        ///    &quot;description&quot;: &quot;Opens the disassembly view at the specified address.&quot;,
        ///    &quot;arguments&quot;: [
        ///      {
        ///        &quot;name&quot;: &quot;address&quot;,
        ///        &quot;type&quot;: &quot;integer&quot;,
        ///        &quot;description&quot;: &quot;The memory address to display in the disassembly view.&quot;
        ///      }
        ///    ],
        ///    &quot;result&quot;: null
        ///  },
        ///  {
        ///    &quot;command&quot;: &quot;dump&quot;,
        ///    &quot;aliases&quot;: [],
        ///    &quot;description&quot;: &quot;Opens the dump view at the specified address.&quot;,
        ///    &quot;arguments&quot;: [
        ///      {
        ///        &quot;name&quot;:  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GUIJSON {
            get {
                return ResourceManager.GetString("GUIJSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to find
        ///ExecuteDebuggerCommand command = find start_address pattern [size]
        ///[integer]start_address = The address to start searching from. The search stops at the end of the memory page.
        ///[string]pattern = The byte pattern to search for, which can include wildcards (e.g., &apos;EB0?90??8D&apos;).
        ///[optional integer]size = The size of the data to search in. Defaults to the size of the memory region.
        ///Description: Find a pattern in a memory page.
        ///Result: $result (integer) = The virtual address where the pattern is found, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Search {
            get {
                return ResourceManager.GetString("Search", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;command&quot;: &quot;find&quot;,
        ///    &quot;aliases&quot;: [],
        ///    &quot;description&quot;: &quot;Find a pattern in a memory page.&quot;,
        ///    &quot;arguments&quot;: [
        ///      {
        ///        &quot;name&quot;: &quot;start_address&quot;,
        ///        &quot;type&quot;: &quot;integer&quot;,
        ///        &quot;description&quot;: &quot;The address to start searching from. The search stops at the end of the memory page.&quot;
        ///      },
        ///      {
        ///        &quot;name&quot;: &quot;pattern&quot;,
        ///        &quot;type&quot;: &quot;string&quot;,
        ///        &quot;description&quot;: &quot;The byte pattern to search for, which can include wildcards (e.g., &apos;EB0?90??8D&apos;).&quot;
        ///      },
        ///      {
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string SearchJSON {
            get {
                return ResourceManager.GetString("SearchJSON", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to createthread
        ///ExecuteDebuggerCommand command = createthread entry_point [argument]
        ///[integer]entry_point = The memory address where the new thread will begin execution.
        ///[optional integer]argument = The argument to pass to the new thread. Defaults to 0 if not specified.
        ///Description: Creates a new thread at the specified entry point. Aliases: threadcreate, newthread, threadnew.
        ///Result: $result (integer) = The thread ID of the newly created thread.
        ///Example:
        ///ExecuteDebuggerCommand command = &quot;createthread 0 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ThreadControl {
            get {
                return ResourceManager.GetString("ThreadControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [
        ///  {
        ///    &quot;command&quot;: &quot;createthread&quot;,
        ///    &quot;aliases&quot;: [&quot;threadcreate&quot;, &quot;newthread&quot;, &quot;threadnew&quot;],
        ///    &quot;description&quot;: &quot;Creates a new thread at the specified entry point.&quot;,
        ///    &quot;arguments&quot;: [
        ///      {
        ///        &quot;name&quot;: &quot;entry_point&quot;,
        ///        &quot;type&quot;: &quot;integer&quot;,
        ///        &quot;description&quot;: &quot;The memory address where the new thread will begin execution.&quot;
        ///      },
        ///      {
        ///        &quot;name&quot;: &quot;argument&quot;,
        ///        &quot;type&quot;: &quot;integer&quot;,
        ///        &quot;description&quot;: &quot;The argument to pass to the new thread. Defaults to 0 if not  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ThreadControlJSON {
            get {
                return ResourceManager.GetString("ThreadControlJSON", resourceCulture);
            }
        }
    }
}
